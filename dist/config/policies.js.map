{"version":3,"sources":["../../config/policies.js"],"names":["module","exports","policies"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAmBAA,OAAOC,OAAP,CAAeC,QAAf,GAA0B;;AAExB;;;;;;;AAOA;;AAEA,OAAK,CAAC,cAAD,CAXmB;;AAaxB,oBAAkB;AAChB,cAAU;AADM,GAbM;;AAiBxB,oBAAkB;AAChB,SAAK;AADW;;AAIlB;;;;;;AAMD;;AAEC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACD;AAxCyB,CAA1B","file":"policies.js","sourcesContent":["/**\n * Policy Mappings\n * (sails.config.policies)\n *\n * Policies are simple functions which run **before** your controllers.\n * You can apply one or more policies to a given controller, or protect\n * its actions individually.\n *\n * Any policy file (e.g. `api/policies/authenticated.js`) can be accessed\n * below by its filename, minus the extension, (e.g. \"authenticated\")\n *\n * For more information on how policies work, see:\n * http://sailsjs.org/#!/documentation/concepts/Policies\n *\n * For more information on configuring policies, check out:\n * http://sailsjs.org/#!/documentation/reference/sails.config/sails.config.policies.html\n */\n\n\nmodule.exports.policies = {\n\n  /***************************************************************************\n  *                                                                          *\n  * Default policy for all controllers and actions (`true` allows public     *\n  * access)                                                                  *\n  *                                                                          *\n  ***************************************************************************/\n\n  // '*': true,\n\n  '*': ['isAuthorized'],\n  \n  'UserController': {\n    'create': true\n  },\n  \n  'AuthController': {\n    '*': true\n  }\n  \n  /***************************************************************************\n  *                                                                          *\n  * Here's an example of mapping some policies to run before a controller    *\n  * and its actions                                                          *\n  *                                                                          *\n  ***************************************************************************/\n\t// RabbitController: {\n\n\t\t// Apply the `false` policy as the default for all of RabbitController's actions\n\t\t// (`false` prevents all access, which ensures that nothing bad happens to our rabbits)\n\t\t// '*': false,\n\n\t\t// For the action `nurture`, apply the 'isRabbitMother' policy\n\t\t// (this overrides `false` above)\n\t\t// nurture\t: 'isRabbitMother',\n\n\t\t// Apply the `isNiceToAnimals` AND `hasRabbitFood` policies\n\t\t// before letting any users feed our rabbits\n\t\t// feed : ['isNiceToAnimals', 'hasRabbitFood']\n\t// }\n};\n"]}