{"version":3,"sources":["../../../api/models/User.js"],"names":["bcrypt","require","Promise","module","exports","attributes","email","type","required","unique","password","minLength","protected","columnName","commander","expeditions","collection","via","journalFiles","toJson","obj","toObject","beforeCreate","values","cb","hash","err","comparePassword","user","resolve","reject","compare","match"],"mappings":";;AAAA;;;;;;AAMA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,UAAUD,QAAQ,UAAR,CAAd;;AAEAE,OAAOC,OAAP,GAAiB;;AAEfC,cAAY;AACVC,WAAO,EAACC,MAAM,QAAP,EAAiBC,UAAU,IAA3B,EAAiCC,QAAQ,IAAzC,EADG;AAEVC,cAAU,EAACH,MAAM,QAAP,EAAiBI,WAAU,CAA3B,EAA8BC,WAAW,IAAzC,EAA+CJ,UAAU,IAAzD,EAA+DK,YAAY,mBAA3E,EAFA;AAGVC,eAAW,EAACP,MAAK,QAAN,EAAgBC,UAAU,IAA1B,EAAgCC,QAAQ,IAAxC,EAHD;;AAKVM,iBAAa;AACXC,kBAAY,YADD;AAEXC,WAAK;AAFM,KALH;;AAUVC,kBAAc;AACZF,kBAAY,aADA;AAEZC,WAAK;AAFO,KAVJ;;AAeVE,YAAQ,kBAAW;AACjB,UAAIC,MAAI,KAAKC,QAAL,EAAR;AACA,aAAOD,IAAIV,QAAX;AACD;AAlBS,GAFG;;AAuBfY,gBAAc,sBAASC,MAAT,EAAiBC,EAAjB,EAAqB;AACjCxB,WAAOyB,IAAP,CAAYF,OAAOb,QAAnB,EAA6B,EAA7B,EAAiC,UAASgB,GAAT,EAAcD,IAAd,EAAoB;AACnD,UAAIC,GAAJ,EAAS,OAAOF,GAAGE,GAAH,CAAP;AACTH,aAAOb,QAAP,GAAkBe,IAAlB;AACAD;AACD,KAJD;AAKD,GA7Bc;;AA+BfG,mBAAiB,yBAASjB,QAAT,EAAmBkB,IAAnB,EAAyB;AACxC,WAAO,IAAI1B,OAAJ,CAAY,UAAS2B,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C9B,aAAO+B,OAAP,CAAerB,QAAf,EAAyBkB,KAAKlB,QAA9B,EAAwC,UAASgB,GAAT,EAAcM,KAAd,EAAqB;AAC3D,YAAIN,GAAJ,EAASI,OAAOJ,GAAP;AACT,YAAIM,KAAJ,EAAW;AACTH,kBAAQ,IAAR;AACD,SAFD,MAEO;AACLC,iBAAOJ,GAAP;AACD;AACF,OAPD;AAQD,KATM,CAAP;AAUD;AA1Cc,CAAjB","file":"User.js","sourcesContent":["/**\n * User.js\n *\n * @description :: TODO: You might write a short summary of how this model works and what it represents here.\n * @docs        :: http://sailsjs.org/documentation/concepts/models-and-orm/models\n */\nvar bcrypt = require(\"bcrypt\");\nvar Promise = require(\"bluebird\");\n\nmodule.exports = {\n\n  attributes: {\n    email: {type: 'string', required: true, unique: true},\n    password: {type: 'string', minLength:6, protected: true, required: true, columnName: \"encryptedPassword\"},\n    commander: {type:'string', required: true, unique: true},\n    \n    expeditions: {\n      collection: 'expedition',\n      via: 'user'\n    },\n    \n    journalFiles: {\n      collection: 'journalFile',\n      via: 'user'\n    },\n    \n    toJson: function() {\n      var obj=this.toObject();\n      delete obj.password\n    }\n  },\n  \n  beforeCreate: function(values, cb) {\n    bcrypt.hash(values.password, 10, function(err, hash) {\n      if (err) return cb(err);\n      values.password = hash;\n      cb();\n    })\n  },\n  \n  comparePassword: function(password, user) {\n    return new Promise(function(resolve, reject) {\n      bcrypt.compare(password, user.password, function(err, match) {\n        if (err) reject(err);\n        if (match) {\n          resolve(true);\n        } else {\n          reject(err);\n        }\n      })\n    });\n  }\n};\n\n"]}