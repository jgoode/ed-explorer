{"version":3,"sources":["../../../api/policies/isAuthorized.js"],"names":["module","exports","req","res","next","token","headers","authorization","parts","split","length","scheme","credentials","test","ResponseService","json","param","query","JwtService","verify","err","decoded","User","findOne","id","then","user","current_user"],"mappings":";;AAAA;;;AAGAA,OAAOC,OAAP,GAAiB,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACzC,MAAIC,cAAJ;;AAEA,MAAIH,IAAII,OAAJ,IAAeJ,IAAII,OAAJ,CAAYC,aAA/B,EAA8C;AAC5C,QAAIC,QAAQN,IAAII,OAAJ,CAAYC,aAAZ,CAA0BE,KAA1B,CAAgC,GAAhC,CAAZ;AACA,QAAID,MAAME,MAAN,IAAgB,CAApB,EAAuB;AACrB,UAAIC,SAASH,MAAM,CAAN,CAAb;AAAA,UACEI,cAAcJ,MAAM,CAAN,CADhB;;AAGA,UAAI,YAAYK,IAAZ,CAAiBF,MAAjB,CAAJ,EAA8B;AAC5BN,gBAAQO,WAAR;AACD;AACF,KAPD,MAOO;AACL,aAAOE,gBAAgBC,IAAhB,CAAqB,GAArB,EAA0BZ,GAA1B,EAA+B,yCAA/B,CAAP;AACD;AACF,GAZD,MAYO,IAAID,IAAIc,KAAJ,CAAU,OAAV,CAAJ,EAAwB;AAC7BX,YAAQH,IAAIc,KAAJ,CAAU,OAAV,CAAR;;AAEA,WAAOd,IAAIe,KAAJ,CAAUZ,KAAjB;AACD,GAJM,MAIA;AACL,WAAOS,gBAAgBC,IAAhB,CAAqB,GAArB,EAA0BZ,GAA1B,EAA+B,mCAA/B,CAAP;AACD;;AAEDe,aAAWC,MAAX,CAAkBd,KAAlB,EAAyB,UAASe,GAAT,EAAcC,OAAd,EAAsB;AAC7C,QAAID,GAAJ,EAAS,OAAON,gBAAgBC,IAAhB,CAAqB,GAArB,EAA0BZ,GAA1B,EAA+B,gBAA/B,CAAP;AACTD,QAAIG,KAAJ,GAAYA,KAAZ;AACAiB,SAAKC,OAAL,CAAa,EAACC,IAAIH,QAAQG,EAAb,EAAb,EAA+BC,IAA/B,CAAoC,UAASC,IAAT,EAAc;AAChDxB,UAAIyB,YAAJ,GAAmBD,IAAnB;AACAtB;AACD,KAHD;AAID,GAPD;AASD,CAhCD","file":"isAuthorized.js","sourcesContent":["/**\n * Created by johngoode on 12/17/16.\n */\nmodule.exports = function (req, res, next) {\n  let token;\n  \n  if (req.headers && req.headers.authorization) {\n    var parts = req.headers.authorization.split(' ');\n    if (parts.length == 2) {\n      var scheme = parts[0],\n        credentials = parts[1];\n      \n      if (/^Bearer$/i.test(scheme)) {\n        token = credentials;\n      }\n    } else {\n      return ResponseService.json(401, res, \"Format is Authorization: Bearer [token]\");\n    }\n  } else if (req.param('token')) {\n    token = req.param('token');\n    \n    delete req.query.token;\n  } else {\n    return ResponseService.json(401, res, \"No authorization header was found\");\n  }\n  \n  JwtService.verify(token, function(err, decoded){\n    if (err) return ResponseService.json(401, res, \"Invalid Token!\");\n    req.token = token;\n    User.findOne({id: decoded.id}).then(function(user){\n      req.current_user = user;\n      next();\n    })\n  });\n  \n}\n"]}